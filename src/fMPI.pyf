!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module fMPI ! in 
    interface  ! in :fMPI
        subroutine rec_a(m_rows,m_n_row_starts,m_n_col_indexes,m_row_starts,m_col_indexes,flock,partition_table,mpi_communicator,m_num_rec_inds,m_rec_disps,m_num_send_inds,m_send_disps) ! in :fMPI:fMPI.f90
            integer intent(in) :: m_rows
            integer, optional,intent(in),check(len(m_row_starts)>=m_n_row_starts),depend(m_row_starts) :: m_n_row_starts=len(m_row_starts)
            integer, optional,intent(in),check(len(m_col_indexes)>=m_n_col_indexes),depend(m_col_indexes) :: m_n_col_indexes=len(m_col_indexes)
            integer, target,dimension(m_n_row_starts),intent(in) :: m_row_starts
            integer, target,dimension(m_n_col_indexes),intent(in) :: m_col_indexes
            integer, optional,intent(in),check((len(partition_table)-1)>=flock),depend(partition_table) :: flock=(len(partition_table)-1)
            integer dimension(flock + 1),intent(in) :: partition_table
            integer intent(in) :: mpi_communicator
            integer, target,dimension(flock),intent(out),depend(flock) :: m_num_rec_inds
            integer, target,dimension(flock),intent(out),depend(flock) :: m_rec_disps
            integer, target,dimension(flock),intent(out),depend(flock) :: m_num_send_inds
            integer, target,dimension(flock),intent(out),depend(flock) :: m_send_disps
        end subroutine rec_a
        subroutine rec_b(m_rows,m_nnz,m_n_row_starts,num_send,m_row_starts,m_col_indexes,m_num_rec_inds,m_rec_disps,m_num_send_inds,m_send_disps,flock,partition_table,mpi_communicator,m_local_col_inds,m_rhs_send_inds) ! in :fMPI:fMPI.f90
            integer intent(in) :: m_rows
            integer, optional,intent(in),check(len(m_col_indexes)>=m_nnz),depend(m_col_indexes) :: m_nnz=len(m_col_indexes)
            integer, optional,intent(in),check(len(m_row_starts)>=m_n_row_starts),depend(m_row_starts) :: m_n_row_starts=len(m_row_starts)
            integer intent(in) :: num_send
            integer, target,dimension(m_n_row_starts),intent(in) :: m_row_starts
            integer, target,dimension(m_nnz),intent(in) :: m_col_indexes
            integer, target,dimension(flock),intent(in) :: m_num_rec_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_rec_disps
            integer, target,dimension(flock),intent(in),depend(flock) :: m_num_send_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_send_disps
            integer, optional,intent(in),check(len(m_num_rec_inds)>=flock),depend(m_num_rec_inds) :: flock=len(m_num_rec_inds)
            integer dimension(flock + 1),intent(in),depend(flock) :: partition_table
            integer intent(in) :: mpi_communicator
            integer, target,dimension(m_nnz),intent(out),depend(m_nnz) :: m_local_col_inds
            integer, target,dimension(num_send),intent(out),depend(num_send) :: m_rhs_send_inds
        end subroutine rec_b
        subroutine one_norm_series(m_rows,m_n_col_indexes,m_n_values,m_n_local_col_indexes,m_n_row_starts,m_sends,m_row_starts,m_col_indexes,m_values,m_num_rec_inds,m_rec_disps,m_num_send_inds,m_send_disps,m_local_col_inds,m_rhs_send_inds,flock,partition_table,mpi_communicator,one_norm_array,p) ! in :fMPI:fMPI.f90
            integer intent(in) :: m_rows
            integer, optional,intent(in),check(len(m_col_indexes)>=m_n_col_indexes),depend(m_col_indexes) :: m_n_col_indexes=len(m_col_indexes)
            integer, optional,intent(in),check(len(m_values)>=m_n_values),depend(m_values) :: m_n_values=len(m_values)
            integer, optional,intent(in),check(len(m_local_col_inds)>=m_n_local_col_indexes),depend(m_local_col_inds) :: m_n_local_col_indexes=len(m_local_col_inds)
            integer, optional,intent(in),check(len(m_row_starts)>=m_n_row_starts),depend(m_row_starts) :: m_n_row_starts=len(m_row_starts)
            integer, optional,intent(in),check(len(m_rhs_send_inds)>=m_sends),depend(m_rhs_send_inds) :: m_sends=len(m_rhs_send_inds)
            integer, target,dimension(m_n_row_starts),intent(in) :: m_row_starts
            integer, target,dimension(m_n_col_indexes),intent(in) :: m_col_indexes
            complex(kind=8), target,dimension(m_n_values),intent(in) :: m_values
            integer, target,dimension(flock),intent(in) :: m_num_rec_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_rec_disps
            integer, target,dimension(flock),intent(in),depend(flock) :: m_num_send_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_send_disps
            integer, target,dimension(m_n_local_col_indexes),intent(in) :: m_local_col_inds
            integer, target,dimension(m_sends),intent(in) :: m_rhs_send_inds
            integer, optional,intent(in),check(len(m_num_rec_inds)>=flock),depend(m_num_rec_inds) :: flock=len(m_num_rec_inds)
            integer dimension(flock + 1),intent(in),depend(flock) :: partition_table
            integer intent(in) :: mpi_communicator
            real(kind=8) dimension(9),intent(out) :: one_norm_array
            integer intent(out) :: p
        end subroutine one_norm_series
        subroutine step(m_rows,m_n_col_indexes,m_n_values,m_n_local_col_indexes,n_rho0_v,n_rhot_v,m_sends,m_row_starts,m_col_indexes,m_values,m_num_rec_inds,m_rec_disps,m_num_send_inds,m_send_disps,m_local_col_inds,m_rhs_send_inds,t,rho0_v,flock,partition_table,p,one_norm_array,mpi_communicator,rhot_v,target_precision,m_n_row_starts) ! in :fMPI:fMPI.f90
            integer intent(in) :: m_rows
            integer, optional,intent(in),check(len(m_col_indexes)>=m_n_col_indexes),depend(m_col_indexes) :: m_n_col_indexes=len(m_col_indexes)
            integer, optional,intent(in),check(len(m_values)>=m_n_values),depend(m_values) :: m_n_values=len(m_values)
            integer, optional,intent(in),check(len(m_local_col_inds)>=m_n_local_col_indexes),depend(m_local_col_inds) :: m_n_local_col_indexes=len(m_local_col_inds)
            integer, optional,intent(in),check(len(rho0_v)>=n_rho0_v),depend(rho0_v) :: n_rho0_v=len(rho0_v)
            integer intent(in) :: n_rhot_v
            integer, optional,intent(in),check(len(m_rhs_send_inds)>=m_sends),depend(m_rhs_send_inds) :: m_sends=len(m_rhs_send_inds)
            integer, target,dimension(m_n_row_starts),intent(in) :: m_row_starts
            integer, target,dimension(m_n_col_indexes),intent(in) :: m_col_indexes
            complex(kind=8), target,dimension(m_n_values),intent(in) :: m_values
            integer, target,dimension(flock),intent(in) :: m_num_rec_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_rec_disps
            integer, target,dimension(flock),intent(in),depend(flock) :: m_num_send_inds
            integer, target,dimension(flock),intent(in),depend(flock) :: m_send_disps
            integer, target,dimension(m_n_local_col_indexes),intent(in) :: m_local_col_inds
            integer, target,dimension(m_sends),intent(in) :: m_rhs_send_inds
            real(kind=8) intent(in) :: t
            complex(kind=8) dimension(n_rho0_v),intent(in) :: rho0_v
            integer, optional,intent(in),check(len(m_num_rec_inds)>=flock),depend(m_num_rec_inds) :: flock=len(m_num_rec_inds)
            integer dimension(flock + 1),intent(in),depend(flock) :: partition_table
            integer intent(inout) :: p
            real(kind=8) dimension(9),intent(inout) :: one_norm_array
            integer intent(in) :: mpi_communicator
            complex(kind=8) dimension(n_rhot_v),intent(out),depend(n_rhot_v) :: rhot_v
            character*2 intent(in) :: target_precision
            integer, optional,intent(in),check(len(m_row_starts)>=m_n_row_starts),depend(m_row_starts) :: m_n_row_starts=len(m_row_starts)
        end subroutine step
    end interface 
end python module fMPI

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
